import prisma from '@/lib/prisma/db';
import { Prisma, PrismaClient } from '@prisma/client'
import { NextRequest, NextResponse } from 'next/server';
import bcrypt from "bcrypt";
import { generateKey } from '@/lib/utils';
import nodemailer from 'nodemailer'

export async function POST(req: NextRequest) {
    const url = 'https://firebasestorage.googleapis.com/v0/b/project-n-eff9b.firebasestorage.app/o/user-profile.png?alt=media&token=30d9c36c-1638-42d5-82e7-fbd9e6f3e438'
    const { username, email, password } = await req.json();

    if (!username && !email && !password) {
        return NextResponse.json({ success: false, message: '‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' }, { status: 400 });
    }
    try {
        const hashpassword = bcrypt.hashSync(password, 10);

        await prisma.user.create({
            data: {
                name: username,
                username,
                email,
                password: hashpassword,
                profile: url,
            }
        })

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ email transporter
        const transporter = nodemailer.createTransport({
            service: "Gmail",
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASSWORD
            },

        });

        // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        await transporter.sendMail({
            from: process.env.EMAIL_FROM,
            to: email,
            subject: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà SHOPKUB üéâ',
            html: `
      <h2>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà SHOPKUB üéâ</h2>
      <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏¥‡∏ô‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß</p>
      <p>üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏£‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà!<br>
      üî• ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà!<br>
      üéÅ ‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏£‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å</p>
      <p>‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</p>
      <a href="${process.env.NEXT_PUBLIC_APP_URL}" 
         style="display: inline-block; padding: 10px 20px; color: #fff; background-color: #ff5733; text-decoration: none; border-radius: 5px;">
        ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      </a>
      <p>‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á! üõçÔ∏è</p>
      <p>‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô SHOPKUB</p>`});

        return NextResponse.json({ success: true, message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' }, { status: 200 });
    } catch (error: any) {
        if (error instanceof Prisma.PrismaClientKnownRequestError) {
            if (error.code === 'P2002') {
                return NextResponse.json({ success: false, message: 'Username ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' }, { status: 400 });
            }
        }
        console.log(error.message)
        return NextResponse.json({ success: false, message: error.message }, { status: 500 });
    }
}

