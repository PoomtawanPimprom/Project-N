generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  username  String    @unique
  password  String?
  email     String    @unique
  mobile    String?   @unique
  birthdate DateTime?
  profile   String?
  saler     Boolean   @default(false)

  resetToken    String?   @unique
  resetTokenExp DateTime?

  //fk
  genderId Int?
  gender   Gender? @relation(fields: [genderId], references: [id])

  roleId Int  @default(1)
  role   Role @relation(fields: [roleId], references: [id])

  userStatusId Int        @default(1)
  userStatus   UserStatus @relation(fields: [userStatusId], references: [id])

  approvedWithdrawals WithdrawalRequest[] @relation("ApprovedWithdrawals")

  UserAddress       UserAddress[]
  Favorite          Favorite[]
  Report            Report[]
  Store             Store[]
  OrderDetail       OrderDetail[]
  CartItem          CartItem[]
  Review            Review[]
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model UserStatus {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model UserAddress {
  id          Int     @id @default(autoincrement())
  fullName    String
  houseNo     String
  moo         String?
  province    String //จังหวัด
  district    String //อำเภอ
  subDistrict String? //ตำบล
  postalCode  String
  mobile      String

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  addressStatusId Int?
  addressStatus   UserAddressStatus? @relation(fields: [addressStatusId], references: [id])
}

model UserAddressStatus {
  id          Int           @id @default(autoincrement())
  name        String
  UserAddress UserAddress[]
}

//----------------------------------------------------------------------------------------------

//Store sytem
model Store {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  imageLogoURL       String?   @db.Text
  imageLogoFileName  String?
  imageBackgroundURL String?   @db.Text
  imageBgFileName    String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  storeStatusId Int         @default(1)
  storeStatus   StoreStatus @relation(fields: [storeStatusId], references: [id])

  Product           Product[]
  WithdrawalRequest WithdrawalRequest[]
}

model StoreStatus {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  store Store[]
}

//----------------------------------------------------------------------------------------------

//Product system
model Product {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  image           Json?
  price           Int           @default(0)
  sales           Int           @default(0)
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?
  //fk 
  storeID         Int
  store           Store         @relation(fields: [storeID], references: [id])
  productStatusID Int           @default(1)
  productStatus   ProductStatus @relation(fields: [productStatusID], references: [id])

  Inventory Inventory[]
  Favorite  Favorite[]
  Report    Report[]
  OrderItem OrderItem[]
  CartItem  CartItem[]
  Review    Review[]
}

model Inventory {
  id        Int      @id @default(autoincrement())
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())

  productID Int
  product   Product @relation(fields: [productID], references: [id])

  @@unique([productID, size, color])
}

model ProductStatus {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]
}

//------------------------------------------------
//Discount system
model Discount {
  id             Int     @id @default(autoincrement())
  name           String
  code           String  @unique
  discountAmount Int     @default(0)
  isActive       Boolean @default(false)

  OrderDetail OrderDetail[]
}

//----------------------------------------------------------------------------------------------

//Favorite system
model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  //fk
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

//----------------------------------------------------------------------------------------------

//manage report 
model Report {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  reportCategoryId Int
  reportCategory   ReportCategory @relation(fields: [reportCategoryId], references: [id])

  reportStatusId Int
  reportStatus   ReportStatus @relation(fields: [reportStatusId], references: [id])
}

model ReportCategory {
  id   Int    @id @default(autoincrement())
  name String

  Report Report[]
}

model ReportStatus {
  id   Int    @id @default(autoincrement())
  name String

  Report Report[]
}

//----------------------------------------------------------------------------------------------

//payment system
model OrderItem {
  id            Int       @id @default(autoincrement())
  color         String?
  size          String?
  quantity      Int
  storeId       Int?
  userAddressId Int?
  updatedAt     DateTime  @updatedAt()
  createdAt     DateTime  @default(now())
  reportAt      DateTime?
  
  Already_withdrawn Int @default(0)

  orderDetailId     Int
  orderDetail       OrderDetail?     @relation(fields: [orderDetailId], references: [id])
  productId         Int
  product           Product          @relation(fields: [productId], references: [id])
  orderItemStatusId Int?
  orderItemStatus   OrderItemStatus? @relation(fields: [orderItemStatusId], references: [id])
}

model OrderItemStatus {
  id   Int    @id @default(autoincrement())
  name String

  OrderItem OrderItem[]
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  total     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discountId Int?
  discount   Discount? @relation(fields: [discountId], references: [id])

  userId        Int
  user          User?        @relation(fields: [userId], references: [id])
  paymentId     Int?         @unique
  payment       Payment?     @relation(fields: [paymentId], references: [id])
  transportId   Int
  transport     Transport?   @relation(fields: [transportId], references: [id])
  orderStatusId Int
  orderStatus   OrderStatus? @relation(fields: [orderStatusId], references: [id])

  OrderItem OrderItem[]
}

model Payment {
  id        Int       @id @default(autoincrement())
  moneySlip String?
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  paymentStatusId Int
  paymentStatus   PaymentStatus @relation(fields: [paymentStatusId], references: [id])

  OrderDetail OrderDetail?
}

model OrderStatus {
  id          Int           @id @default(autoincrement())
  name        String
  OrderDetail OrderDetail[]
}

model Transport {
  id             Int           @id @default(autoincrement())
  providerName   String
  transportPrice Float
  OrderDetail    OrderDetail[]
}

model PaymentStatus {
  id      Int       @id @default(autoincrement())
  name    String
  Payment Payment[]
}

//----------------------------------------------------------------------------------------------
// Review System

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())
  images    Json?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  color    String?
  size     String?
  quantity Int
}

// เบิกเงิน
model WithdrawalRequest {
  id            Int      @id @default(autoincrement())
  accountNumber String // เลขบัญชี
  accountName   String // ชื่อเจ้าของบัญชี
  bankName      String // ชื่อธนาคาร
  amount        Float // จำนวนเงินที่ขอเบิก
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  message       String? 

  // สถานะของการเบิก เช่น รออนุมัติ, อนุมัติแล้ว, ถูกปฏิเสธ
  status   WithdrawalStatus @relation(fields: [statusId], references: [id])
  statusId Int

  // FK เชื่อมกับร้านที่ทำเรื่องเบิก
  storeId Int
  store   Store @relation(fields: [storeId], references: [id])

  approvedById Int?     // Admin ที่อนุมัติ
  approvedBy   User?     @relation("ApprovedWithdrawals", fields: [approvedById], references: [id])
  approvedAt   DateTime? // เวลาอนุมัติ
}

model WithdrawalStatus {
  id   Int    @id @default(autoincrement())
  name String

  requests WithdrawalRequest[]
}
